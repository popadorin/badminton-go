{"version":3,"sources":["models/index.ts","models/Notifications.ts","components/NotificationInfo/NotificationInfo.tsx","components/Divider/Divider.tsx","components/Home/Home.tsx","components/WhoComes/WhoComes.tsx","components/AppContent/AppContent.tsx","config/index.ts","App/App.tsx","utils/index.ts","serviceWorker.ts","index.tsx"],"names":["createNotification","gameType","when","where","message","NotificationInfo","notification","Divider","style","height","width","backgroundColor","margin","Home","dummyNotifications","map","index","Fragment","key","length","WhoComes","dummyWhoComes","el","name","TabItemTitle","AppContent","textAlign","display","flexDirection","justifyContent","IndexToTabConfig","getIndexToTab","App","_enum","useState","activeIndex","setActiveIndex","handleActiveIndexUpdate","n","Object","values","filter","isNaN","Number","tabItemTitle","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.68b061a9.chunk.js","sourcesContent":["export * from './Notifications'\nexport * from './GameType'\nexport * from './Player'\n","import {GameType} from './GameType';\n\nexport interface Notification {\n  gameType: GameType\n  when: string\n  where: string\n  message?: string\n}\n\nexport function createNotification(gameType: GameType, when: string, where?: string, message?: string): Notification {\n  return {\n    where: 'UTM',\n    message: message,\n    gameType,\n    when,\n  }\n}\n","import React from 'react'\nimport {Notification} from '../../models';\n\nexport function NotificationInfo({notification}: { notification: Notification }) {\n  return (\n    <div>\n      <p>{notification.where}</p>\n      <p>Type: {notification.gameType}</p>\n      <p>{notification.when}</p>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport function Divider() {\n  return (\n    <div style={{height: '1px', width: '80%', backgroundColor: 'lightgrey', margin: '0 auto'}}/>\n  );\n}\n","import React from 'react';\nimport {createNotification, Notification} from '../../models';\nimport {NotificationInfo} from '../NotificationInfo';\nimport {Divider} from '../Divider';\n\nexport function Home() {\n  return (\n    <div>\n      <h1>Badminton go</h1>\n      <h3>Notifications</h3>\n      {\n        dummyNotifications.map((notification, index) => (\n          <React.Fragment key={index}>\n            <NotificationInfo notification={notification}/>\n            {index !== dummyNotifications.length - 1 && <Divider/>}\n          </React.Fragment>\n        ))\n      }\n    </div>\n  );\n}\n\nconst dummyNotifications: Notification[] = [\n  createNotification('Training', 'Tuesday 8:00'),\n  createNotification('Training', 'Thursday 8:00'),\n  createNotification('Play', 'Saturday 10:00'),\n  createNotification('Play', 'Sunday 15:00')\n];\n","import React from 'react';\nimport {Player} from '../../models';\n\nexport function WhoComes() {\n  return (\n    <div>\n      {\n        dummyWhoComes.map((el, index) => (\n          <div key={index}>\n            {el.name}\n          </div>\n        ))\n      }\n    </div>\n  );\n}\n\nconst dummyWhoComes: Player[] = [\n  {name: 'Leosha'},\n  {name: 'Katea'},\n  {name: 'Dima'}\n];\n","import React, {ReactElement} from 'react';\nimport {Home} from '../Home';\nimport {WhoComes} from '../WhoComes';\n\ninterface Props {\n  index: number\n}\n\nfunction getIndexToTab(index: number): ReactElement {\n  return IndexToTabConfig[index];\n}\n\nexport const AppContent = ({index}: Props) => {\n  return (\n    <div style={{\n      height: '100vh',\n      textAlign: 'center',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center'\n    }}>\n      {getIndexToTab(index)}\n    </div>\n  );\n};\n\nconst IndexToTabConfig = [<Home/>, <WhoComes/>];\n","export enum TabItemTitle {\n  home = 'Home',\n  whoComes = 'Cine vine'\n}\n","import React, {useState} from 'react';\nimport Tab from '@material/react-tab';\nimport TabBar from '@material/react-tab-bar';\nimport '@material/react-tab-bar/dist/tab-bar.css';\nimport '@material/react-tab-scroller/dist/tab-scroller.css';\nimport '@material/react-tab/dist/tab.css';\nimport '@material/react-tab-indicator/dist/tab-indicator.css';\nimport {AppContent} from '../components';\nimport {TabItemTitle} from '../config';\nimport {getEnumValues} from '../utils';\nimport './App.css';\n\nfunction App() {\n  const [activeIndex, setActiveIndex] = useState(0);\n  return (\n    <div style={{\n      height: '100vh',\n      width: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'space-between'\n    }}>\n      <AppContent index={activeIndex}/>\n      <TabBar\n        activeIndex={activeIndex}\n        handleActiveIndexUpdate={n => setActiveIndex(n)}\n      >\n        {\n          getEnumValues(TabItemTitle).map((tabItemTitle: string) => (\n            <Tab key={tabItemTitle}>\n              <span className='mdc-tab__text-label'>{tabItemTitle}</span>\n            </Tab>\n          ))\n        }\n      </TabBar>\n    </div>\n  );\n}\n\nexport default App;\n","export const getEnumValues = (_enum: any): any[] => Object.values(_enum).filter(el => isNaN(Number(el)))\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}